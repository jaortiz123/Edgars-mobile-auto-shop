name: Unified CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root npm deps (E2E tooling)
        run: npm ci

      - name: Cache frontend node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-fe-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-fe-

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install backend deps
        working-directory: backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Frontend lint
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci
      - name: ESLint (frontend)
        working-directory: frontend
        run: npm run lint:ci
      - name: Typecheck (frontend)
        working-directory: frontend
        run: npm run typecheck

      - name: Backend lint (flake8)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - name: Install backend deps
        working-directory: backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: flake8
        working-directory: backend
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  unit-tests:
    name: Unit Tests (Backend + Frontend)
    runs-on: ubuntu-latest
    needs: static-analysis
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_autoshop
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U test_user -d test_autoshop"
          --health-interval=5s --health-timeout=5s --health-retries=20
    steps:
      - uses: actions/checkout@v4

      - name: Backend deps
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - name: Install backend deps
        working-directory: backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: Apply raw SQL migrations
        working-directory: backend
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_autoshop
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        run: python run_sql_migrations.py

      - name: Run backend tests
        working-directory: backend
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_autoshop
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: test-secret
          LOG_LEVEL: WARNING
        run: pytest -q --tb=short

      - name: Frontend deps
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Run frontend unit tests
        working-directory: frontend
        run: npm run test:ci

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install root deps
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start services (docker-compose)
        run: docker-compose up -d --build

      - name: Wait for backend health
        run: |
          timeout 60 bash -c 'until curl -fsS http://localhost:3001/health; do sleep 2; done'

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Teardown services
        if: always()
        run: docker-compose down

  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - uses: actions/checkout@v4

      - name: Build frontend
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install deps
        working-directory: frontend
        run: npm ci
      - name: Build
        working-directory: frontend
        run: npm run build
      - name: Upload frontend bundle
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Build backend image
        run: |
          docker build -t mobile-autoshop-backend:${{ github.sha }} ./backend
          docker save mobile-autoshop-backend:${{ github.sha }} -o backend-image.tar
      - name: Upload backend image
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar
