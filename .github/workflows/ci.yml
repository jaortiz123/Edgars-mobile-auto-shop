name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Nightly accessibility tests at 02:00 UTC (T-016 follow-up)
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend ESLint - Fail fast on lint issues
  frontend-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          echo "üì¶ Installing frontend dependencies for linting..."
          npm ci

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint to check code quality..."
          npm run lint --if-present

  # Backend flake8 - Fail fast on lint issues  
  backend-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies (including flake8)
        run: |
          echo "üì¶ Installing Python dependencies for linting..."
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run flake8
        run: |
          echo "üîç Running flake8 to check code quality..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # Backend Python Tests with Coverage
  backend-tests:
    runs-on: ubuntu-latest
    needs: [backend-lint]
    defaults:
      run:
        working-directory: backend
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_autoshop
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U test_user -d test_autoshop"
          --health-interval=5s --health-timeout=5s --health-retries=20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: Set up test environment
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_autoshop
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: test-secret
          LOG_LEVEL: WARNING
        run: |
          echo "Environment configured for testing"

      - name: Run backend tests with coverage
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_autoshop
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: test-secret
          LOG_LEVEL: WARNING
        run: |
          echo "üß™ Running backend tests with coverage..."
          pytest tests/ \
            --cov=. \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=75 \
            -v \
            --tb=short

      - name: Upload backend coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # No-DB Smoke Tests (T-006) - Sprint 6 Exit Criteria #1
  no-db-smoke-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-mock

      - name: No-DB smoke (T-006)
        env:
          # Explicitly NO database connection - tests must work without DB
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: test-secret
          LOG_LEVEL: WARNING
        run: |
          echo "üî• Running no-DB smoke tests for T-006 exit criteria..."
          echo "Running: pytest -q backend/tests/test_appointments_api.py::test_get_admin_appointments_returns_empty_list_if_no_db"
          pytest -q tests/test_appointments_api.py::test_get_admin_appointments_returns_empty_list_if_no_db
          echo ""
          echo "Running: pytest -q backend/tests/test_errors.py"
          pytest -q tests/test_errors.py
          echo ""
          echo "‚úÖ T-006 no-DB smoke tests completed successfully"

  # Docs curl test (T-007) - Living example to prove envelope shape
  docs-curl:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    # Skip on PRs that don't touch backend
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.changed_files.*.filename, 'backend/') || contains(github.event.pull_request.changed_files.*.filename, 'docs/') }}
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install jq for JSON assertions
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Start Flask server in background
        env:
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: test-secret
          LOG_LEVEL: WARNING
        run: |
          echo "üåê Starting Flask server for curl test..."
          python local_server.py &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          for i in {1..30}; do
            if curl -f http://localhost:3001/health 2>/dev/null; then
              echo "‚úÖ Server is ready!"
              break
            fi
            echo "‚è≥ Waiting for server... ($i/30)"
            sleep 2
          done

      - name: Test API endpoint with curl and assert envelope shape
        run: |
          echo "üß™ Testing /api/admin/appointments endpoint..."
          
          # Make curl request and capture response
          echo "üì° Making curl request to http://localhost:3001/api/admin/appointments"
          response=$(curl -s -X GET "http://localhost:3001/api/admin/appointments" \
            -H "Content-Type: application/json")
          
          echo "üìÑ Response: $response"
          
          # Use jq to assert .errors == null (T-007 requirement)
          errors_field=$(echo "$response" | jq -r '.errors')
          
          if [ "$errors_field" = "null" ]; then
            echo "‚úÖ SUCCESS: .errors field is null as expected"
          else
            echo "‚ùå FAILURE: .errors field is not null, got: $errors_field"
            exit 1
          fi
          
          # Additional validation: ensure we have proper envelope structure
          data_field=$(echo "$response" | jq '.data')
          meta_field=$(echo "$response" | jq '.meta')
          
          if [ "$data_field" != "null" ] && [ "$meta_field" != "null" ]; then
            echo "‚úÖ SUCCESS: Envelope structure is valid (has data and meta fields)"
          else
            echo "‚ùå FAILURE: Invalid envelope structure"
            echo "data field: $data_field"
            echo "meta field: $meta_field" 
            exit 1
          fi

      - name: Stop Flask server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "üõë Stopping Flask server (PID: $SERVER_PID)"
            kill $SERVER_PID || true
          fi

  # Frontend Node.js Tests with Coverage  
  frontend-tests:
    runs-on: ubuntu-latest
    needs: [frontend-lint]
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          echo "üì¶ Installing frontend dependencies..."
          npm ci

      - name: Run frontend tests with coverage
        run: |
          echo "üß™ Running frontend tests with coverage..."
          npm test -- --coverage --run

      - name: Upload frontend coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # Accessibility Tests
  accessibility-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: |
          echo "‚ôø Running WCAG 2.2 AA accessibility tests..."
          npm run test:a11y

  # End-to-End Tests (Optional - only run on main branch)
  e2e-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: ${{ runner.os }}-docker-

      - name: Install dependencies
        run: npm ci

      - name: Start services
        run: |
          echo "üê≥ Starting Docker services for E2E tests..."
          docker-compose up -d --build

      - name: Wait for services to be ready
        run: |
          echo "‚è≥ Waiting for services to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Run E2E tests
        run: |
          echo "üé≠ Running end-to-end tests..."
          npm run test:e2e

      - name: Cleanup services
        if: always()
        run: docker-compose down

  # Build & Security Scan
  build-and-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt

      - name: Build frontend
        run: |
          cd frontend
          echo "üèóÔ∏è Building frontend for production..."
          npm run build

      - name: Security audit - Frontend
        run: |
          cd frontend
          echo "üîí Running frontend security audit..."
          npm audit --audit-level=high

      - name: Security audit - Backend  
        run: |
          cd backend
          echo "üîí Running backend security audit..."
          pip install safety
          safety check

  # Test Coverage Summary
  coverage-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    
    steps:
      - name: Coverage Summary
        run: |
          echo "üìä Test Coverage Summary"
          echo "======================="
          echo "‚úÖ Backend: Python tests with 75% coverage threshold"
          echo "‚úÖ Frontend: Node.js tests with 100% coverage threshold (statements, branches, functions, lines)"
          echo "‚úÖ Accessibility: WCAG 2.2 AA compliance tests"
          echo ""
          echo "Coverage reports uploaded to Codecov for detailed analysis."
      - run: npm ci
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: ${{ runner.os }}-docker-
      - run: docker-compose up -d --build
      - run: npm test:e2e

  docker-deploy:
    needs: [backend-tests, frontend-tests, e2e-tests]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: docker/setup-buildx-action@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
      - name: Render task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/task-definition.json
          container-name: backend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

  db-migration:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: autoshop
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U user -d autoshop"
          --health-interval=5s --health-timeout=5s --health-retries=20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install backend dependencies
        run: pip install -r requirements.txt
      - name: Install psql client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Initialize database schema
        run: psql -h localhost -U user -d autoshop -f init.sql
      - name: Alembic upgrade head
        run: alembic upgrade head
      - name: Verify appointments schema
        run: |
          psql -h localhost -U user -d autoshop -c "\d appointments"
          psql -h localhost -U user -d autoshop -c "\di ix_appointments_start_ts"
