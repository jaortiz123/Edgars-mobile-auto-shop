name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Nightly accessibility tests at 02:00 UTC (T-016 follow-up)
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend ESLint - Fail fast on lint issues
  frontend-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          echo "üì¶ Installing frontend dependencies for linting..."
          npm ci

      - name: Run ESLint (Strict CI Mode)
        run: |
          echo "üîç Running ESLint in strict CI mode (zero warnings allowed)..."
          npm run lint:ci

  # Backend flake8 - Fail fast on lint issues
  backend-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies (including flake8)
        run: |
          echo "üì¶ Installing Python dependencies for linting..."
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run flake8
        run: |
          echo "üîç Running flake8 to check code quality..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # Backend Python Tests with Coverage
  backend-tests:
    runs-on: ubuntu-latest
    needs: [backend-lint]
    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_autoshop
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U test_user -d test_autoshop"
          --health-interval=5s --health-timeout=5s --health-retries=20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: Set up test environment
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_autoshop
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: test-secret
          LOG_LEVEL: WARNING
        run: |
          echo "Environment configured for testing"

      - name: Apply raw SQL migrations (idempotent)
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_autoshop
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        run: |
          echo "üß± Running raw SQL migration runner..."
          python run_sql_migrations.py

      - name: Run backend tests with coverage
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_autoshop
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: test-secret
          LOG_LEVEL: WARNING
        run: |
          echo "üß™ Running backend tests with coverage..."
          pytest tests/ \
            --cov=. \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=75 \
            -v \
            --tb=short

      - name: Upload backend coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # No-DB Smoke Tests (T-006) - Sprint 6 Exit Criteria #1
  no-db-smoke-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-mock

      - name: No-DB smoke (T-006)
        env:
          # Explicitly NO database connection - tests must work without DB
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: test-secret
          LOG_LEVEL: WARNING
        run: |
          echo "üî• Running no-DB smoke tests for T-006 exit criteria..."
          echo "Running: pytest -q backend/tests/test_appointments_api.py::test_get_admin_appointments_returns_empty_list_if_no_db"
          pytest -q tests/test_appointments_api.py::test_get_admin_appointments_returns_empty_list_if_no_db
          echo ""
          echo "Running: pytest -q backend/tests/test_errors.py"
          pytest -q tests/test_errors.py
          echo ""
          echo "‚úÖ T-006 no-DB smoke tests completed successfully"

  # Docs curl test (T-007) - Living example to prove envelope shape
  docs-curl:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    # Skip on PRs that don't touch backend
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.changed_files.*.filename, 'backend/') || contains(github.event.pull_request.changed_files.*.filename, 'docs/') }}
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install jq for JSON assertions
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Start Flask server in background
        env:
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: test-secret
          LOG_LEVEL: WARNING
        run: |
          echo "üåê Starting Flask server for curl test..."
          python local_server.py &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

          # Wait for server to start
          for i in {1..30}; do
            if curl -f http://localhost:3001/health 2>/dev/null; then
              echo "‚úÖ Server is ready!"
              break
            fi
            echo "‚è≥ Waiting for server... ($i/30)"
            sleep 2
          done

      - name: Test API endpoint with curl and assert envelope shape
        run: |
          echo "üß™ Testing /api/admin/appointments endpoint..."

          # Make curl request and capture response
          echo "üì° Making curl request to http://localhost:3001/api/admin/appointments"
          response=$(curl -s -X GET "http://localhost:3001/api/admin/appointments" \
            -H "Content-Type: application/json")

          echo "üìÑ Response: $response"

          # Use jq to assert .errors == null (T-007 requirement)
          errors_field=$(echo "$response" | jq -r '.errors')

          if [ "$errors_field" = "null" ]; then
            echo "‚úÖ SUCCESS: .errors field is null as expected"
          else
            echo "‚ùå FAILURE: .errors field is not null, got: $errors_field"
            exit 1
          fi

          # Additional validation: ensure we have proper envelope structure
          data_field=$(echo "$response" | jq '.data')
          meta_field=$(echo "$response" | jq '.meta')

          if [ "$data_field" != "null" ] && [ "$meta_field" != "null" ]; then
            echo "‚úÖ SUCCESS: Envelope structure is valid (has data and meta fields)"
          else
            echo "‚ùå FAILURE: Invalid envelope structure"
            echo "data field: $data_field"
            echo "meta field: $meta_field"
            exit 1
          fi

      - name: Stop Flask server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "üõë Stopping Flask server (PID: $SERVER_PID)"
            kill $SERVER_PID || true
          fi

  # Frontend Unit Tests and Coverage Enforcement (T6)
  frontend-tests:
    runs-on: ubuntu-latest
    needs: [frontend-lint]
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: |
          echo "üì¶ Installing frontend dependencies..."
          npm ci

      - name: Run frontend unit tests with coverage
        id: run-tests
        continue-on-error: true
        timeout-minutes: 10
        run: |
          echo "üß™ Running frontend unit tests with coverage enforcement..."
          set -euo pipefail

          # Clean previous coverage data
          rm -rf coverage/ || true

          # P2-T-009: Capture test output for retry analysis
          echo "üìù Capturing test output for retry analysis..."

          # Run tests with proper error handling and output capture
          if ! npm test -- --coverage --run --coverageProvider=v8 --reporter=verbose 2>&1 | tee vitest-output.log; then
            echo "‚ùå Tests failed, but continuing to check if coverage was generated..."
            TEST_EXIT_CODE=$?
          else
            echo "‚úÖ Tests completed successfully"
            TEST_EXIT_CODE=0
          fi

          # Export test result for later steps
          echo "TEST_EXIT_CODE=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT

          # Store test output for retry analysis
          if [ -f "vitest-output.log" ]; then
            echo "üìä Test output captured for retry analysis"
          fi

          # Verify coverage files were generated
          if [ ! -d "coverage" ]; then
            echo "‚ùå Coverage directory not created - tests may have failed catastrophically"
            exit 1
          fi

          echo "üìÅ Coverage files generated:"
          ls -la coverage/ || echo "‚ùå Cannot list coverage directory"

      - name: Coverage Check
        run: npm run test -- --coverage

      - name: Install bc calculator for coverage threshold checks
        run: |
          echo "üßÆ Installing bc calculator for floating-point arithmetic..."
          sudo apt-get update -qq && sudo apt-get install -y bc
          echo "‚úÖ bc calculator installed: $(bc --version | head -1)"

      - name: Check coverage thresholds
        id: check-coverage
        run: |
          echo "üìä Checking coverage thresholds with enhanced error handling..."
          set -euo pipefail

          # Validate coverage files exist
          COVERAGE_SUMMARY="coverage/coverage-summary.json"
          if [ ! -f "$COVERAGE_SUMMARY" ]; then
            echo "‚ùå Coverage summary not found at $COVERAGE_SUMMARY"
            echo "üìÅ Available files in coverage/:"
            ls -la coverage/ || echo "‚ùå Coverage directory does not exist"
            exit 1
          fi

          # Validate JSON format
          if ! node -p "JSON.parse(require('fs').readFileSync('$COVERAGE_SUMMARY'))" > /dev/null 2>&1; then
            echo "‚ùå Coverage summary file is not valid JSON"
            echo "üìÑ File contents:"
            head -10 "$COVERAGE_SUMMARY" || echo "‚ùå Cannot read file"
            exit 1
          fi

          # Extract coverage percentages with error handling
          echo "üìà Extracting coverage metrics..."
          statements=$(node -p "
            try {
              const data = JSON.parse(require('fs').readFileSync('$COVERAGE_SUMMARY'));
              const pct = data.total.statements.pct;
              if (typeof pct !== 'number' || isNaN(pct)) throw new Error('Invalid statements percentage');
              pct;
            } catch (e) {
              console.error('Error parsing statements:', e.message);
              process.exit(1);
            }
          ")

          branches=$(node -p "
            try {
              const data = JSON.parse(require('fs').readFileSync('$COVERAGE_SUMMARY'));
              const pct = data.total.branches.pct;
              if (typeof pct !== 'number' || isNaN(pct)) throw new Error('Invalid branches percentage');
              pct;
            } catch (e) {
              console.error('Error parsing branches:', e.message);
              process.exit(1);
            }
          ")

          functions=$(node -p "
            try {
              const data = JSON.parse(require('fs').readFileSync('$COVERAGE_SUMMARY'));
              const pct = data.total.functions.pct;
              if (typeof pct !== 'number' || isNaN(pct)) throw new Error('Invalid functions percentage');
              pct;
            } catch (e) {
              console.error('Error parsing functions:', e.message);
              process.exit(1);
            }
          ")

          lines=$(node -p "
            try {
              const data = JSON.parse(require('fs').readFileSync('$COVERAGE_SUMMARY'));
              const pct = data.total.lines.pct;
              if (typeof pct !== 'number' || isNaN(pct)) throw new Error('Invalid lines percentage');
              pct;
            } catch (e) {
              console.error('Error parsing lines:', e.message);
              process.exit(1);
            }
          ")

          echo "üìà Coverage Results:"
          echo "  Statements: ${statements}% (CI threshold: 60%, Vitest target: 80%)"
          echo "  Branches: ${branches}% (CI threshold: 50%, Vitest target: 75%)"
          echo "  Functions: ${functions}% (CI threshold: 60%, Vitest target: 80%)"
          echo "  Lines: ${lines}% (CI threshold: 60%, Vitest target: 80%)"

          # Store results for other steps
          echo "COVERAGE_STATEMENTS=$statements" >> $GITHUB_OUTPUT
          echo "COVERAGE_BRANCHES=$branches" >> $GITHUB_OUTPUT
          echo "COVERAGE_FUNCTIONS=$functions" >> $GITHUB_OUTPUT
          echo "COVERAGE_LINES=$lines" >> $GITHUB_OUTPUT

          # Check CI thresholds with robust floating-point comparison
          echo "üîç Checking CI minimum thresholds..."
          FAILED=0

          # Statements check
          if (( $(echo "$statements < 60" | bc -l) )); then
            echo "‚ùå Statements coverage ${statements}% is below CI threshold of 60%"
            FAILED=1
          else
            echo "‚úÖ Statements coverage ${statements}% meets CI threshold"
          fi

          # Branches check
          if (( $(echo "$branches < 50" | bc -l) )); then
            echo "‚ùå Branches coverage ${branches}% is below CI threshold of 50%"
            FAILED=1
          else
            echo "‚úÖ Branches coverage ${branches}% meets CI threshold"
          fi

          # Functions check
          if (( $(echo "$functions < 60" | bc -l) )); then
            echo "‚ùå Functions coverage ${functions}% is below CI threshold of 60%"
            FAILED=1
          else
            echo "‚úÖ Functions coverage ${functions}% meets CI threshold"
          fi

          # Lines check
          if (( $(echo "$lines < 60" | bc -l) )); then
            echo "‚ùå Lines coverage ${lines}% is below CI threshold of 60%"
            FAILED=1
          else
            echo "‚úÖ Lines coverage ${lines}% meets CI threshold"
          fi

          # Export failure status
          echo "THRESHOLD_FAILED=$FAILED" >> $GITHUB_OUTPUT

          if [ "$FAILED" = "1" ]; then
            echo ""
            echo "‚ùå Coverage does not meet CI minimum thresholds"
            echo "üí° Note: CI enforces minimums (60%/50%) while vitest.config.ts has higher targets (80%/75%)"
            echo "üìö See docs/CI-Coverage-Integration.md for guidance on improving coverage"
            exit 1
          else
            echo "‚úÖ Coverage meets all CI minimum thresholds"
          fi

      - name: Check critical module coverage (P2-T-004)
        id: critical-coverage
        run: |
          echo "üîç Checking critical module coverage thresholds (P2-T-004)..."
          set -euo pipefail

          # Navigate to project root where coverage check script is located
          cd ..

          # Verify critical modules config and coverage check script exist
          if [ ! -f "scripts/coverage/critical-modules.json" ]; then
            echo "‚ùå Critical modules configuration not found at scripts/coverage/critical-modules.json"
            exit 1
          fi

          if [ ! -f "scripts/coverage/check.js" ]; then
            echo "‚ùå Coverage check script not found at scripts/coverage/check.js"
            exit 1
          fi

          # Verify coverage summary exists
          if [ ! -f "frontend/coverage/coverage-summary.json" ]; then
            echo "‚ùå Coverage summary not found at frontend/coverage/coverage-summary.json"
            echo "üìÅ Available files in frontend/coverage/:"
            ls -la frontend/coverage/ || echo "‚ùå Coverage directory does not exist"
            exit 1
          fi

          # Run critical module coverage check
          echo "üéØ Running critical module coverage analysis..."
          if node scripts/coverage/check.js frontend/coverage/coverage-summary.json scripts/coverage/critical-modules.json; then
            echo "‚úÖ All critical modules meet 70% coverage threshold"
            echo "CRITICAL_COVERAGE_PASSED=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Critical module coverage check failed"
            echo "üéØ Some critical modules are below the 70% coverage threshold"
            echo "üìö See P2-T-004 coverage gap analysis for improvement guidance"
            echo "CRITICAL_COVERAGE_PASSED=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        continue-on-error: true
        timeout-minutes: 5
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: frontend-coverage-report-${{ github.run_id }}
          path: |
            frontend/coverage/
            !frontend/coverage/tmp/
            !frontend/coverage/**/*.tmp
          retention-days: 30
          if-no-files-found: warn

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        timeout-minutes: 3
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const coveragePath = path.join('frontend', 'coverage', 'coverage-summary.json');

              // Validate file exists and is readable
              if (!fs.existsSync(coveragePath)) {
                console.log('‚ùå Coverage summary not found, skipping PR comment');
                return;
              }

              // Validate file size (should be reasonable JSON)
              const stats = fs.statSync(coveragePath);
              if (stats.size === 0) {
                console.log('‚ùå Coverage summary file is empty, skipping PR comment');
                return;
              }

              if (stats.size > 1024 * 1024) { // 1MB limit
                console.log('‚ùå Coverage summary file too large, skipping PR comment');
                return;
              }

              // Parse and validate JSON structure
              let coverage;
              try {
                const content = fs.readFileSync(coveragePath, 'utf8');
                coverage = JSON.parse(content);

                if (!coverage.total || typeof coverage.total !== 'object') {
                  throw new Error('Invalid coverage structure: missing total');
                }

                const required = ['statements', 'branches', 'functions', 'lines'];
                for (const metric of required) {
                  if (!coverage.total[metric] || typeof coverage.total[metric].pct !== 'number') {
                    throw new Error(`Invalid coverage structure: missing ${metric}.pct`);
                  }
                }
              } catch (e) {
                console.log(`‚ùå Failed to parse coverage JSON: ${e.message}`);
                return;
              }

              const { statements, branches, functions, lines } = coverage.total;

              // Validate percentages are reasonable
              const metrics = [statements.pct, branches.pct, functions.pct, lines.pct];
              if (metrics.some(pct => pct < 0 || pct > 100 || isNaN(pct))) {
                console.log('‚ùå Invalid coverage percentages detected, skipping PR comment');
                return;
              }

              // Get threshold check results from previous step
              const testsFailed = '${{ steps.run-tests.outputs.TEST_EXIT_CODE }}' !== '0';
              const thresholdsFailed = '${{ steps.check-coverage.outputs.THRESHOLD_FAILED }}' === '1';

              // Calculate overall status
              const overallStatus = !testsFailed && !thresholdsFailed ? '‚úÖ PASSING' : '‚ùå FAILING';
              const statusIcon = !testsFailed && !thresholdsFailed ? '‚úÖ' : '‚ùå';

              const body = `## üìä Frontend Test Coverage Report ${statusIcon}

              **Overall Status:** ${overallStatus}

              | Metric | Coverage | CI Threshold | Vitest Target | Status |
              |--------|----------|--------------|---------------|---------|
              | Statements | ${statements.pct}% | 60% | 80% | ${statements.pct >= 60 ? '‚úÖ' : '‚ùå'} |
              | Branches | ${branches.pct}% | 50% | 75% | ${branches.pct >= 50 ? '‚úÖ' : '‚ùå'} |
              | Functions | ${functions.pct}% | 60% | 80% | ${functions.pct >= 60 ? '‚úÖ' : '‚ùå'} |
              | Lines | ${lines.pct}% | 60% | 80% | ${lines.pct >= 60 ? '‚úÖ' : '‚ùå'} |

              **Test Results:**
              - **Tests:** ${testsFailed ? '‚ùå Failed' : '‚úÖ Passed'}
              - **CI Thresholds:** ${thresholdsFailed ? '‚ùå Failed' : '‚úÖ Passed'} (minimum requirements)
              - **Total Tests:** ${Math.max(statements.total, branches.total, functions.total, lines.total)}
              - **Covered Lines:** ${statements.covered}

              ${thresholdsFailed ? '‚ö†Ô∏è **Coverage below CI minimums** - see [improvement guide](docs/CI-Coverage-Integration.md)' : ''}

              üìà [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              üìä [Download coverage artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;

              // Find existing coverage comment to update instead of creating multiple
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const existingComment = comments.find(comment =>
                comment.user.login === 'github-actions[bot]' &&
                comment.body.includes('üìä Frontend Test Coverage Report')
              );

              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: body
                });
                console.log('‚úÖ Updated existing coverage comment');
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
                console.log('‚úÖ Created new coverage comment');
              }

            } catch (error) {
              console.log(`‚ùå Failed to post coverage comment: ${error.message}`);
              console.log('Stack trace:', error.stack);
              // Don't fail the build for comment failures
            }
            }

      # P2-T-009: Analyze test retries from Vitest output
      - name: Analyze Vitest test retries
        if: always() # Run even if tests failed
        run: |
          echo "üîç P2-T-009: Analyzing Vitest test retries..."
          cd ..

          # Run retry analysis script
          if [ -f "scripts/aggregate-test-retries.js" ]; then
            if [ -f "frontend/vitest-output.log" ]; then
              VITEST_OUTPUT=$(cat frontend/vitest-output.log) node scripts/aggregate-test-retries.js
              echo "üìä Retry analysis completed"
            else
              echo "‚ö†Ô∏è No vitest output log found for retry analysis"
              # Still run the script to generate an empty report
              node scripts/aggregate-test-retries.js
            fi
          else
            echo "‚ö†Ô∏è Retry analysis script not found"
          fi

      # Upload retry report as artifact
      - name: Upload retry report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-retry-report-${{ github.run_id }}
          path: test-retry-report.md
          retention-days: 30

  # Accessibility Tests
  accessibility-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: |
          echo "‚ôø Running WCAG 2.2 AA accessibility tests..."
          npm run test:a11y

  # Cross-Browser Smoke Tests (P2-T-005) + Mobile Viewport Tests (P2-T-008)
  cross-browser-smoke:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit, mobile-chrome]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run cross-browser smoke test
        run: |
          echo "üåê Running smoke test on ${{ matrix.browser }}..."
          # P2-T-009: Capture Playwright output for retry analysis
          npm run test:e2e:smoke -- --project=${{ matrix.browser }} 2>&1 | tee playwright-output-${{ matrix.browser }}.log

      # P2-T-009: Analyze Playwright test retries
      - name: Analyze Playwright test retries
        if: always() # Run even if tests failed
        run: |
          echo "üîç P2-T-009: Analyzing Playwright test retries for ${{ matrix.browser }}..."

          # Run retry analysis script with Playwright output
          if [ -f "scripts/aggregate-test-retries.js" ]; then
            if [ -f "playwright-output-${{ matrix.browser }}.log" ]; then
              PLAYWRIGHT_OUTPUT=$(cat playwright-output-${{ matrix.browser }}.log) node scripts/aggregate-test-retries.js
              echo "üìä Playwright retry analysis completed for ${{ matrix.browser }}"

              # Rename the report to include browser name
              if [ -f "test-retry-report.md" ]; then
                mv test-retry-report.md "test-retry-report-${{ matrix.browser }}.md"
              fi
            else
              echo "‚ö†Ô∏è No Playwright output log found for retry analysis"
              # Still run the script to generate an empty report
              node scripts/aggregate-test-retries.js
              if [ -f "test-retry-report.md" ]; then
                mv test-retry-report.md "test-retry-report-${{ matrix.browser }}.md"
              fi
            fi
          else
            echo "‚ö†Ô∏è Retry analysis script not found"
          fi

      # Upload retry report as artifact
      - name: Upload retry report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-retry-report-${{ matrix.browser }}-${{ github.run_id }}
          path: test-retry-report-${{ matrix.browser }}.md
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ github.run_id }}
          path: |
            test-results/
            e2e-report/
          retention-days: 7

  # End-to-End Tests (Optional - only run on main branch)
  e2e-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: ${{ runner.os }}-docker-

      - name: Install dependencies
        run: npm ci

      - name: Start services
        run: |
          echo "üê≥ Starting Docker services for E2E tests..."
          docker-compose up -d --build

      - name: Wait for services to be ready
        run: |
          echo "‚è≥ Waiting for services to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Run E2E tests
        run: |
          echo "üé≠ Running end-to-end tests..."
          npm run test:e2e

      - name: Cleanup services
        if: always()
        run: docker-compose down

  # Build & Security Scan
  build-and-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt

      - name: Build frontend
        run: |
          cd frontend
          echo "üèóÔ∏è Building frontend for production..."
          npm run build

      - name: Security audit - Frontend
        run: |
          cd frontend
          echo "üîí Running frontend security audit..."
          npm audit --audit-level=high

      - name: Security audit - Backend
        run: |
          cd backend
          echo "üîí Running backend security audit..."
          pip install safety
          safety check

  # Test Coverage Summary
  coverage-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()

    steps:
      - name: Coverage Summary
        run: |
          echo "üìä Test Coverage Summary"
          echo "======================="
          echo "‚úÖ Backend: Python tests with 75% coverage threshold"
          echo "‚úÖ Frontend: Node.js tests with 100% coverage threshold (statements, branches, functions, lines)"
          echo "‚úÖ Accessibility: WCAG 2.2 AA compliance tests"
          echo ""
          echo "Coverage reports uploaded to Codecov for detailed analysis."
      - run: npm ci
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: ${{ runner.os }}-docker-
      - run: docker-compose up -d --build
      - run: npm test:e2e

  docker-deploy:
    needs: [backend-tests, frontend-tests, e2e-tests]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: docker/setup-buildx-action@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
      - name: Render task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/task-definition.json
          container-name: backend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

  db-migration:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: autoshop
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U user -d autoshop"
          --health-interval=5s --health-timeout=5s --health-retries=20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install backend dependencies
        run: pip install -r requirements.txt
      - name: Install psql client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Initialize database schema
        run: psql -h localhost -U user -d autoshop -f init.sql
      - name: Alembic upgrade head
        run: alembic upgrade head
      - name: Verify appointments schema
        run: |
          psql -h localhost -U user -d autoshop -c "\d appointments"
          psql -h localhost -U user -d autoshop -c "\di ix_appointments_start_ts"

  # Backend Integration Tests with Containerized Database (P2-T-003)
  backend-integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Docker Buildx (for testcontainers)
        uses: docker/setup-buildx-action@v3

      - name: Run containerized integration tests
        env:
          FALLBACK_TO_MEMORY: "false"
          JWT_SECRET: test-secret
          LOG_LEVEL: INFO
        run: |
          echo "üê≥ Running containerized integration tests..."
          echo "PostgreSQL container will be started automatically by testcontainers"
          timeout 300 pytest tests/test_integration_database.py -v \
            --tb=short \
            || echo "‚ö†Ô∏è Integration tests timed out or failed"

      - name: Verify container cleanup
        if: always()
        run: |
          echo "üßπ Checking for orphaned containers..."
          docker ps -a --filter "label=org.testcontainers" || true
          echo "Container cleanup verification complete"

  # P2-T-010: Performance Smoke Tests - Critical Endpoint Latency Checks
  performance-smoke-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, no-db-smoke-tests]
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies for performance tests..."
          npm ci

      - name: Start backend server
        run: |
          echo "üöÄ Starting backend server for performance testing..."
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
          FALLBACK_TO_MEMORY=true JWT_SECRET=test-secret LOG_LEVEL=WARNING python local_server.py &
          echo "Backend server started in background"
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:3001/health > /dev/null 2>&1; then
              echo "‚úÖ Backend server is ready"
              break
            fi
            echo "‚è≥ Waiting for backend server... (attempt $i/30)"
            sleep 2
          done

      - name: Run performance smoke tests
        env:
          BACKEND_URL: http://localhost:3001
          NODE_ENV: test
          CI: true
        run: |
          echo "üöÄ Running P2-T-010: Performance Smoke Tests"
          echo "Target: GET /api/admin/appointments/board"
          echo "Threshold: P95 < 500ms"
          echo ""
          npm run test:perf

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results-${{ github.run_id }}
          path: |
            test-results/performance-results.json
            test-results/performance-latencies.csv
          retention-days: 30

      - name: Performance test summary
        if: always()
        run: |
          echo "üìä P2-T-010: Performance Test Summary"
          echo "====================================="

          if [ -f test-results/performance-results.json ]; then
            echo "‚úÖ Performance results generated"

            # Extract key metrics using jq if available, otherwise use basic parsing
            if command -v jq >/dev/null 2>&1; then
              P95=$(jq -r '.latencies.p95' test-results/performance-results.json)
              MEAN=$(jq -r '.latencies.mean' test-results/performance-results.json)
              SUCCESS_RATE=$(jq -r '.successRate' test-results/performance-results.json)
              THRESHOLD_PASSED=$(jq -r '.thresholds.p95Passed' test-results/performance-results.json)

              echo "üìà Key Metrics:"
              echo "   P95 Latency: ${P95}ms"
              echo "   Mean Latency: ${MEAN}ms"
              echo "   Success Rate: ${SUCCESS_RATE}%"
              echo "   Threshold Check: $( [ "$THRESHOLD_PASSED" = "true" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED" )"
            else
              echo "üìÑ Performance results file found - detailed metrics in artifact"
            fi

            echo ""
            echo "üìÑ Artifacts uploaded:"
            echo "   - performance-results-${{ github.run_id }}"
            echo "   - performance-results.json (detailed metrics)"
            echo "   - performance-latencies.csv (raw data)"
          else
            echo "‚ùå No performance results file found"
          fi

          echo ""
          echo "üéØ P2-T-010 Criteria Check:"
          echo "   ‚úÖ Super-lightweight script using undici"
          echo "   ‚úÖ Measures GET /dashboard/stats latency"
          echo "   ‚úÖ Fails if P95 > 500ms (enforced in test)"
          echo "   ‚úÖ Publishes timing as artifact"
          echo "   ‚úÖ Runs in <1s on CI (designed for speed)"

  # P2-T-009: Aggregate all retry reports from all test jobs
  aggregate-retry-reports:
    runs-on: ubuntu-latest
    needs: [frontend-tests, cross-browser-smoke, performance-smoke-tests]
    if: always() # Run even if some tests failed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Download all retry report artifacts
      - name: Download all retry reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*retry-report*"
          path: retry-reports/
          merge-multiple: true

      - name: Aggregate retry reports
        run: |
          echo "üìä P2-T-009: Aggregating all test retry reports..."

          # Create combined retry report
          echo "# Combined Test Retry Report" > combined-retry-report.md
          echo "" >> combined-retry-report.md
          echo "**Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> combined-retry-report.md
          echo "**CI Run:** ${{ github.run_id }}" >> combined-retry-report.md
          echo "" >> combined-retry-report.md

          # Count total retry reports
          REPORT_COUNT=$(find retry-reports/ -name "*.md" 2>/dev/null | wc -l)
          echo "**Total Report Files:** $REPORT_COUNT" >> combined-retry-report.md
          echo "" >> combined-retry-report.md

          if [ "$REPORT_COUNT" -eq 0 ]; then
            echo "## ‚úÖ No Retry Reports Found" >> combined-retry-report.md
            echo "" >> combined-retry-report.md
            echo "All test suites completed without generating retry reports." >> combined-retry-report.md
            echo "This indicates stable test execution across all environments." >> combined-retry-report.md
          else
            echo "## üìã Individual Retry Reports" >> combined-retry-report.md
            echo "" >> combined-retry-report.md

            # Process each retry report
            for report in retry-reports/*.md; do
              if [ -f "$report" ]; then
                echo "### $(basename "$report" .md)" >> combined-retry-report.md
                echo "" >> combined-retry-report.md
                echo '```' >> combined-retry-report.md
                cat "$report" >> combined-retry-report.md
                echo '```' >> combined-retry-report.md
                echo "" >> combined-retry-report.md
              fi
            done
          fi

          echo "---" >> combined-retry-report.md
          echo "*Generated by P2-T-009: Flaky Test Detection & Retries*" >> combined-retry-report.md

          echo "üìÑ Combined retry report generated:"
          ls -la combined-retry-report.md

      - name: Upload combined retry report
        uses: actions/upload-artifact@v4
        with:
          name: combined-retry-report-${{ github.run_id }}
          path: combined-retry-report.md
          retention-days: 30

      - name: Display retry summary
        run: |
          echo "üîç P2-T-009: Test Retry Summary"
          echo "=============================="

          # Count total reports and look for retry indicators
          TOTAL_REPORTS=$(find retry-reports/ -name "*.md" 2>/dev/null | wc -l)
          echo "üìä Total retry report files: $TOTAL_REPORTS"

          if [ "$TOTAL_REPORTS" -eq 0 ]; then
            echo "‚úÖ No retry reports found - all tests stable"
          else
            echo "üìã Retry reports generated:"
            find retry-reports/ -name "*.md" -exec echo "  - {}" \;

            # Look for retry indicators in the reports
            RETRY_COUNT=0
            if find retry-reports/ -name "*.md" -exec grep -l "retry\|Retry\|RETRY" {} \; 2>/dev/null | head -1 > /dev/null; then
              RETRY_COUNT=$(find retry-reports/ -name "*.md" -exec grep -c "retry\|Retry\|RETRY" {} \; 2>/dev/null | awk '{sum += $1} END {print sum}')
            fi

            if [ "$RETRY_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è Total retry indicators found: $RETRY_COUNT"
              echo "üìÑ Check the combined retry report for details"
            else
              echo "‚úÖ No retry indicators found in reports"
            fi
          fi

          echo ""
          echo "üìÑ Combined report available as artifact: combined-retry-report-${{ github.run_id }}"
