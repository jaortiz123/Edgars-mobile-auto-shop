name: CI

on:
  push:
    branches:
      - main
      - fix/ci-pipeline
      - feature/**
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  COVERAGE_MIN: '26'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_autoshop
        ports:
          - 55432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d test_autoshop"
          --health-interval=2s --health-timeout=2s --health-retries=30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Single source of truth: call the same scripts used locally
      - name: Setup
        run: scripts/ci/setup.sh

      - name: Lint
        run: scripts/ci/lint.sh

      - name: Unit (coverage gate)
        env:
          COVERAGE_MIN: ${{ env.COVERAGE_MIN }}
          APP_INSTANCE_ID: ci
          SKIP_TENANT_ENFORCEMENT: "true"
          UNIT_DB: sqlite
          FALLBACK_TO_MEMORY: "true"
          JWT_SECRET: dev_secret
          AWS_DEFAULT_REGION: us-west-2
        run: scripts/ci/test_unit.sh

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fe-coverage
          path: frontend/coverage

      - name: Build
        run: scripts/ci/build.sh

      - name: Wait for Postgres (host)
        run: |
          for i in {1..60}; do
            if pg_isready -h 127.0.0.1 -p 55432 -U test_user -d test_autoshop; then exit 0; fi
            sleep 1
          done
          echo "Postgres never became ready"; exit 1

      - name: Apply schema + seed minimum data
        run: |
          psql "postgresql://test_user:test_password@127.0.0.1:55432/test_autoshop" -v ON_ERROR_STOP=1 -f database/init.sql || echo "No database/init.sql found"
          python backend/run_sql_migrations.py || echo "Migration script not found or failed"
          psql "postgresql://test_user:test_password@127.0.0.1:55432/test_autoshop" -v ON_ERROR_STOP=1 -f backend/seeds/seed_s1.sql || echo "No seed file found"

      - name: Integration (real Postgres)
        env:
          DATABASE_URL: postgresql://test_user:test_password@127.0.0.1:55432/test_autoshop
          AWS_DEFAULT_REGION: us-west-2
          APP_INSTANCE_ID: ci
          SKIP_TENANT_ENFORCEMENT: "true"
          FALLBACK_TO_MEMORY: "false"
        run: scripts/ci/test_integration.sh

      # Playwright dependencies & cache (prevents re-download each run)
      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: frontend
        run: npx playwright install --with-deps chromium

      - name: E2E (Playwright)
        run: scripts/ci/test_e2e.sh

      - name: Upload Playwright artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: |
            test-results/**
            playwright-report/**
            **/test-results/**
