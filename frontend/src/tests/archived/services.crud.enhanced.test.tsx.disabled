/**
 * Sprint 7 T5: Enhanced Services CRUD Test with Mock Factory Integration
 * Demonstrates improved component isolation and standardized mock patterns
 */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { vi, test, expect, beforeEach, describe, afterEach } from 'vitest';
import AppointmentDrawer from '../components/admin/AppointmentDrawer';
import { ToastProvider } from '../components/ui/Toast';
import { mockFactory, testUtils } from '@/tests/mockFactory';
import { withTestEnvironment } from '@/tests/testUtils';

// Use mock factory for consistent API behavior
const { resetAll, api: apiMocks } = mockFactory;

// Mock the toast library with mock factory patterns
vi.mock('../lib/toast', () => ({
  setToastPush: vi.fn(),
  toast: {
    success: vi.fn(),
    error: vi.fn(),
    info: vi.fn()
  }
}));

const mockDrawerData = {
  appointment: {
    id: 'apt-123',
    status: 'SCHEDULED',
    total_amount: 150.00,
    paid_amount: 0,
    check_in_at: null
  },
  customer: {
    id: 'cust-1',
    name: 'John Doe',
    phone: '+15551234567',
    email: 'john@example.com'
  },
  vehicle: {
    id: 'veh-1',
    year: 2020,
    make: 'Honda',
    model: 'Civic',
    vin: '1HGBH41JXMN109186'
  },
  services: [
    {
      id: 'svc-1',
      appointment_id: 'apt-123',
      name: 'Oil Change',
      description: 'Full synthetic oil change',
      price: 75.00
    },
    {
      id: 'svc-2',
      appointment_id: 'apt-123',
      name: 'Tire Rotation',
      description: 'Rotate all four tires',
      price: 50.00
    }
  ]
};

describe('Services CRUD in AppointmentDrawer - Enhanced with Mock Factory', () => {
  beforeEach(() => {
    // Reset all mocks to clean state
    resetAll();
    
    // Setup default API responses using mock factory
    apiMocks.setupDefaultResponses({
      getDrawer: { success: true, data: mockDrawerData },
      createAppointmentService: { success: true, data: { id: 'new-svc-123' } },
      updateAppointmentService: { success: true, data: {} },
      deleteAppointmentService: { success: true, data: {} }
    });
  });

  afterEach(() => {
    resetAll();
  });

  const renderWithProviders = (children: React.ReactNode) => {
    return render(
      <ToastProvider>
        {children}
      </ToastProvider>
    );
  };

  test('displays existing services correctly with mock factory data', async () => {
    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Oil Change')).toBeInTheDocument();
      expect(screen.getByText('Tire Rotation')).toBeInTheDocument();
      expect(screen.getByText('$75.00')).toBeInTheDocument();
      expect(screen.getByText('$50.00')).toBeInTheDocument();
    });

    // Verify API was called with correct parameters
    expect(apiMocks.getRequestCount()).toBe(1);
    expect(apiMocks.getLastRequest()).toMatchObject({
      method: 'getDrawer',
      params: ['apt-123']
    });
  });

  test('adds a new service successfully with network simulation', async () => {
    // Configure realistic network delay
    apiMocks.setNetworkDelay(150);
    
    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Oil Change')).toBeInTheDocument();
    });

    // Click add service button
    const addButton = screen.getByText('Add Service');
    fireEvent.click(addButton);

    // Fill out the form
    const nameInput = screen.getByLabelText(/service name/i);
    const descInput = screen.getByLabelText(/description/i);
    const priceInput = screen.getByLabelText(/price/i);

    fireEvent.change(nameInput, { target: { value: 'Brake Inspection' } });
    fireEvent.change(descInput, { target: { value: 'Complete brake system check' } });
    fireEvent.change(priceInput, { target: { value: '85.00' } });

    // Submit the form
    const submitButton = screen.getByText('Save Service');
    fireEvent.click(submitButton);

    // Verify loading state during network delay
    expect(screen.getByText('Saving...')).toBeInTheDocument();

    await waitFor(() => {
      // Verify success state
      expect(screen.queryByText('Saving...')).not.toBeInTheDocument();
    }, { timeout: 500 });

    // Verify API calls
    expect(apiMocks.getRequestCount()).toBe(2); // getDrawer + createService
    const createRequest = apiMocks.getRequestHistory().find(r => r.method === 'createAppointmentService');
    expect(createRequest).toMatchObject({
      method: 'createAppointmentService',
      params: ['apt-123', {
        name: 'Brake Inspection',
        description: 'Complete brake system check',
        price: 85.00
      }]
    });
  });

  test('handles API errors gracefully with failure simulation', async () => {
    // Configure API to fail
    apiMocks.setFailureRate(1.0); // 100% failure rate
    apiMocks.setupErrorResponse('createAppointmentService', {
      error: 'Network error',
      status: 500
    });

    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Oil Change')).toBeInTheDocument();
    });

    // Try to add a service
    const addButton = screen.getByText('Add Service');
    fireEvent.click(addButton);

    const nameInput = screen.getByLabelText(/service name/i);
    const submitButton = screen.getByText('Save Service');

    fireEvent.change(nameInput, { target: { value: 'Test Service' } });
    fireEvent.click(submitButton);

    await waitFor(() => {
      // Verify error handling
      expect(screen.getByText(/error adding service/i)).toBeInTheDocument();
    });

    // Verify error was logged in mock factory
    const errorStats = apiMocks.getErrorStats();
    expect(errorStats.total).toBe(1);
    expect(errorStats.byMethod.createAppointmentService).toBe(1);
  });

  test('validates required fields with enhanced error messages', async () => {
    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Oil Change')).toBeInTheDocument();
    });

    // Try to submit empty form
    const addButton = screen.getByText('Add Service');
    fireEvent.click(addButton);

    const submitButton = screen.getByText('Save Service');
    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(screen.getByText(/service name is required/i)).toBeInTheDocument();
      expect(screen.getByText(/price is required/i)).toBeInTheDocument();
    });

    // Verify no API calls were made for invalid form
    expect(apiMocks.getRequestCount()).toBe(1); // Only initial getDrawer
  });

  test('edits an existing service with optimistic updates', async () => {
    // Enable optimistic update simulation
    apiMocks.setOptimisticUpdates(true);
    
    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Oil Change')).toBeInTheDocument();
    });

    // Click edit button for first service
    const editButtons = screen.getAllByText('Edit');
    fireEvent.click(editButtons[0]);

    // Modify the service
    const nameInput = screen.getByDisplayValue('Oil Change');
    fireEvent.change(nameInput, { target: { value: 'Premium Oil Change' } });

    const submitButton = screen.getByText('Save Changes');
    fireEvent.click(submitButton);

    // Verify optimistic update
    expect(screen.getByText('Premium Oil Change')).toBeInTheDocument();

    await waitFor(() => {
      // Verify API call completed
      const updateRequest = apiMocks.getRequestHistory().find(r => r.method === 'updateAppointmentService');
      expect(updateRequest).toBeDefined();
    });
  });

  test('deletes a service with confirmation flow', async () => {
    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Oil Change')).toBeInTheDocument();
    });

    // Click delete button
    const deleteButtons = screen.getAllByText('Delete');
    fireEvent.click(deleteButtons[0]);

    // Verify confirmation dialog
    expect(screen.getByText(/are you sure you want to delete/i)).toBeInTheDocument();

    // Confirm deletion
    const confirmButton = screen.getByText('Delete Service');
    fireEvent.click(confirmButton);

    await waitFor(() => {
      // Verify service was removed
      expect(screen.queryByText('Oil Change')).not.toBeInTheDocument();
    });

    // Verify API call
    const deleteRequest = apiMocks.getRequestHistory().find(r => r.method === 'deleteAppointmentService');
    expect(deleteRequest).toMatchObject({
      method: 'deleteAppointmentService',
      params: ['svc-1']
    });
  });

  test('handles concurrent operations correctly', async () => {
    // Enable concurrent operation testing
    apiMocks.setNetworkDelay(100);
    
    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Oil Change')).toBeInTheDocument();
    });

    // Start multiple operations simultaneously
    const addButton = screen.getByText('Add Service');
    const editButtons = screen.getAllByText('Edit');

    // Trigger concurrent operations
    fireEvent.click(addButton);
    fireEvent.click(editButtons[0]);

    // Verify both forms are accessible
    expect(screen.getByText('Add New Service')).toBeInTheDocument();
    expect(screen.getByText('Edit Service')).toBeInTheDocument();

    // Verify proper state management
    expect(apiMocks.getActiveRequestCount()).toBeLessThanOrEqual(2);
  });

  test('shows empty state when no services exist', async () => {
    // Setup empty response
    apiMocks.setupDefaultResponses({
      getDrawer: { 
        success: true, 
        data: { 
          ...mockDrawerData, 
          services: [] 
        } 
      }
    });

    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText(/no services added yet/i)).toBeInTheDocument();
      expect(screen.getByText('Add First Service')).toBeInTheDocument();
    });

    // Verify proper empty state handling
    expect(apiMocks.getRequestCount()).toBe(1);
  });

  test('performance monitoring integration', async () => {
    // Enable performance monitoring in mock factory
    const performanceTracker = mockFactory.enablePerformanceTracking();
    
    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Oil Change')).toBeInTheDocument();
    });

    // Verify performance metrics
    const metrics = performanceTracker.getMetrics();
    expect(metrics.componentRenderTime).toBeLessThan(500); // Should render within 500ms
    expect(metrics.apiResponseTime).toBeLessThan(200); // API should respond within 200ms
    expect(metrics.totalLoadTime).toBeLessThan(1000); // Total load should be under 1s
  });

  test('accessibility compliance verification', async () => {
    renderWithProviders(
      <AppointmentDrawer 
        appointmentId="apt-123" 
        isOpen={true} 
        onClose={() => {}} 
      />
    );

    await waitFor(() => {
      expect(screen.getByText('Oil Change')).toBeInTheDocument();
    });

    // Verify ARIA labels and roles
    expect(screen.getByRole('dialog')).toBeInTheDocument();
    expect(screen.getByLabelText(/appointment details/i)).toBeInTheDocument();
    
    // Test keyboard navigation
    const firstFocusable = screen.getAllByRole('button')[0];
    firstFocusable.focus();
    expect(document.activeElement).toBe(firstFocusable);

    // Verify screen reader announcements through mock factory
    const announcements = mockFactory.notifications?.getAccessibilityAnnouncements?.() || [];
    expect(announcements.length).toBeGreaterThan(0);
  });
});
