repo:
  monorepo: false
  scope: ["backend", "frontend"]
  runtimes:
    node: "18.x"
    packageManager: "npm"
    python: "3.9"
  frameworks:
    frontend: "React+Vite"
    backend: "Flask"
    tests: ["Jest", "React Testing Library", "Pytest", "pytest-cov", "mutmut"]
  db:
    engine: "PostgreSQL"
    fallback: "SQLite"
    containerization: "Docker"
    connectionPool: "ThreadedConnectionPool (5-20 connections)"
    seed: "init_db.py"
    envFiles: [".env"]
    hardeningSprint:
      window: "2025-08 to 2025-09 (Comprehensive Hardening Initiative)"
      auditsCompleted: 6
      focus: ["security hardening", "test infrastructure", "performance optimization", "accessibility compliance"]
      removedSlowE2E: "Legacy full invoice lifecycle UI test (replaced by domain+API+slim E2E)"
      domainLayer: "Invoice domain module now unit-tested (fast) to reduce reliance on UI flows"

architecture:
  backend:
    productionServer: "Gunicorn (4 workers)"
    developmentServer: "Flask dev server"
    wsgiEntry: "backend/wsgi.py"
    connectionPooling: "ThreadedConnectionPool + PgBouncer"
    testStrategy: "SQLite for unit tests (TEST_MODE=unit), PostgreSQL for integration"
  frontend:
    bundleSize: "~200KB gzipped (99% reduction from 20MB achieved)"
    codeSplitting: "React.lazy() with Suspense"
    optimization: "Vite build with tree-shaking"
  database:
    rls: "Enabled on all tables"
    crossTenantProtection: "customer_id isolation enforced"
    indexes: ["customer_id", "appointment_id", "status", "created_at"]

auth:
  mechanism: "JWT Bearer tokens"
  passwordHashing: "bcrypt (automatic migration from SHA256)"
  csrf: false
  roles: ["Owner", "Advisor", "Customer"]
  sessionExpiry: "24 hours"
  sensitiveRoutes: ["/api/admin/*", "/api/customers/*/history"]
  testAccounts:
    owner: "owner@example.com"
    advisor: "advisor@example.com"
  invariants: ["auth-required-for-admin", "customer-data-isolation", "role-based-access-control"]
  additionalInvariants:
    - "No public access to /api/admin/service-operations"
    - "Seeded auth token in storageState for Playwright global-setup"
    - "All passwords must meet complexity requirements (8+ chars, uppercase, lowercase, number)"

api:
  openapi: null
  offLimits: ["/api/payments/*"]
  standardContract:
    error: "{error: {code, message, details?}}"
    success: "{data: any, meta?: {pagination?, timestamp?}}"
  realVsMock:
    real: ["/api/appointments/*", "/api/admin/*", "/api/customers/*"]
    mock: []
    serviceCatalog:
      endpoint: "/api/admin/service-operations"
      supportsSearch: true
      queryParams:
        q: "substring match (case-insensitive) across name, category, keywords; min length 2"
        limit: "bounded 1..500 (default 50 with q, 500 without)"
      responseShape:
        shape: "flat_array"
        legacyWrapper: "?legacy=1"
        itemFields: [id, name, category, default_hours, default_price, keywords, skill_level, flags]
      failureModes: ["empty-table => empty modal", "unseeded DB", "auth missing => 401/empty depending on middleware"]
      p0Condition: "Zero active rows = appointment creation degraded (cannot add services)"

performance:
  baseline:
    globalCoverage: "25% (up from 5.89% crisis)"
    criticalModuleCoverage: "93% (validation.py: 95%, security_core.py: 87%, passwords.py: 100%)"
    mutationScore: "76% on password module"
    concurrentUsers: "200+ with Gunicorn (was 5-10 with Flask dev)"
    responseTimeTarget: "P95 < 300ms, P99 < 800ms"
  optimizations:
    queryPatterns: "JSON aggregation for list endpoints (no N+1 issues)"
    connectionEfficiency: "2000% improvement with pooling"
    bundleReduction: "99% (20MB → 200KB)"
  knownBottlenecks:
    - "No caching layer (Redis planned)"
    - "Sequential IDs (UUID migration planned)"
    - "No CDN for static assets"

ci:
  requiredChecks: ["npm audit", "safety", "pytest", "jest", "diff-cover"]
  coverage:
    frontend: 0.60
    backend: 0.25
    diffCoverage: 0.80
  qualityGates:
    diffCover: "80% minimum for new/modified code"
    mutationTesting: "mutmut on security modules"
    flakeDetection: "pytest-rerunfailures (--reruns 2)"
  flakyJobs: ["performance", "accessibility"]
  previews: false
  smokeTests:
    - name: "service-catalog-populated"
      file: "e2e/service-catalog-populated.spec.ts"
      asserts: [">0 active services"]
    - name: "user-pays-invoice"
      file: "e2e/user_pays_invoice.spec.ts"
      notes: "Slim flow ensuring invoice lifecycle intact without full heavy UI path"

testing:
  infrastructure:
    unitTests:
      backend: "pytest with SQLite in-memory (no Docker required)"
      frontend: "Jest + React Testing Library"
    integrationTests:
      backend: "pytest with testcontainers PostgreSQL"
    hybridConftest: "backend/tests/conftest.py supports both modes"
  locations: ["frontend/src/__tests__/**", "backend/tests/**"]
  testCounts:
    backend: "111 unit tests for critical modules"
    frontend: "942 tests (864 passing, 22 accessibility fixes needed)"
  criticalFlows: ["appointment-create", "appointment-update", "status-board"]
  brittleAreas: ["appointment history", "customer messaging", "TemplateFormModal"]
  uiStrategy: "React Testing Library"
  pyramidAdjustments:
    invoice:
      removed: "monolithic invoice lifecycle UI test"
      replacedWith: ["invoice domain unit tests", "focused API workflow test", "slim E2E payment confirmation"]
  newSmoke:
    - "service catalog seeded"
  seedsRequiredForTests:
    - path: "backend/seeds/seed_s1.sql"
      reason: "Provides 20+ catalog services; empty state is a P0 outage for creation"
  warningsAddressed: ["React act() warnings (in progress cleanup)"]

boundaries:
  offLimitsPaths: []
  maxComponentSize: 500
  noRefactorWithoutADR: ["auth middleware"]
  adrReferences:
    - id: "2025-08-17-service-catalog"
      file: "docs/decisions/2025-08-17-service-catalog.md"
      summary: "Initial decision to defer enrichment later; superseded by P0 seed requirement once empty state discovered"

dependencies:
  pinned:
    frontend: true
    backend: false
  doNotBump: []
  advisories: ["form-data"]
  notes:
    - "Backend Python deps installed inside container; restart backend container to pick up code changes (no autoreload)"

deployment:
  production:
    server: "Gunicorn with 4 workers"
    database: "AWS RDS PostgreSQL with connection pooling (ThreadedConnectionPool 5-20)"
    ssl: "Cloudflare proxy with automatic HTTPS"
    monitoring: "RLS integrity checks + SQL audit trail"
    rollout: "Blue-green with health check endpoint /api/health"
  security:
    rls: "Row-level security enforced at DB layer"
    rbac: "Role-based access control with tenant isolation"
    credentials: "bcrypt password hashing, secure session management"
    crossTenantPrevention: "Comprehensive RLS policies + Flask architecture hardening"
  healthChecks:
    - endpoint: "/api/health"
      checks: ["database connection", "RLS policies active", "tenant isolation"]
    - endpoint: "/api/metrics"
      metrics: ["connection pool status", "query performance", "error rates"]

technicalDebt:
  identified:
    - "No caching layer (Redis planned for Phase 3)"
    - "Sequential IDs vulnerable to enumeration (UUID migration planned)"
    - "No CDN for static assets"
    - "React act() warnings in test suite (22 accessibility fixes needed)"
    - "Flaky accessibility tests requiring stabilization"
  prioritized:
    high: ["UUID migration for security", "Redis caching for performance"]
    medium: ["CDN implementation", "accessibility test stabilization"]
    low: ["Additional monitoring dashboards", "automated deployment pipelines"]

auditHistory:
  completedAudits:
    - name: "Authentication & Authorization Audit"
      date: "2025-01-XX"
      findings: "RLS gaps, cross-tenant vulnerabilities"
      status: "COMPLETE - All vulnerabilities patched"
    - name: "UI/UX Completeness Audit"
      date: "2025-01-XX"
      findings: "22 accessibility violations, 99% bundle size reduction needed"
      status: "COMPLETE - Bundle optimized, accessibility fixes in progress"
    - name: "Core Business Logic Epic"
      date: "2025-01-XX"
      findings: "Service catalog empty state P0 issue"
      status: "COMPLETE - Seeds implemented, workflow validated"
    - name: "Appointment Scheduling Foundation"
      date: "2025-01-XX"
      findings: "Timezone handling, status board performance"
      status: "COMPLETE - Production-ready implementation"
    - name: "Invoice Generation System"
      date: "2025-01-XX"
      findings: "Payment flow brittleness, PDF generation gaps"
      status: "COMPLETE - E2E invoice lifecycle implemented"
    - name: "Customer Search Implementation"
      date: "2025-01-XX"
      findings: "Search performance, customer profile management"
      status: "COMPLETE - Optimized search with proper indexing"
  securityValidation:
    crossTenantTesting: "PASSED - No data leakage between tenants"
    rlsIntegrity: "PASSED - All queries properly filtered"
    productionReadiness: "PASSED - Load tested with 200+ concurrent users"

budgets:
  maxFiles: 8
  maxLoc: 300
  DoD: ["tests", "coverage-delta", "docs"]
  rollback: "git revert"

risk:
  criticalFlows: ["authentication", "appointment-board", "appointment-creation", "customer-history", "payment-processing"]
  sensitiveDataAreas: ["/api/customers/*", "/api/appointments/*"]
  blackoutDates: []
  catalog:
    emptyTableImpact: "P0 – service selection impossible"
    mitigation: ["seed_s1.sql mandatory", "startup WARNING in init.sql", "smoke test"]
  search:
    perfFuture: "Add index (btree lower(name), GIN keywords) if dataset grows > 1k rows"

owners:
  auth: ["@jesusortiz"]
  database: ["@jesusortiz"]
  securitySignoff: "@jesusortiz"

plan:
  targetPaths: ["backend/local_server.py", "frontend/src/components/admin/AppointmentDrawer.tsx"]
  coverageDelta:
    frontend: 0.10
    backend: 0.10
  inScopeBehaviors: ["appointment history load", "board view rendering", "calendar view rendering"]
  outOfScope: ["payment processing"]
  fixtures: ["backend/init_db.py"]
  knownFlakes: []
  currentFocus:
    hardening: ["finish act() warning cleanup", "ensure service search latency acceptable", "add index if needed"]

secrets:
  logRedaction: ["email", "phone", "jwt"]
  approvedTestUsers: []

serviceCatalog:
  seedScript: "backend/seeds/seed_s1.sql"
  expectedActiveMin: 10
  currentActiveApprox: 22
  inactiveExamples: 1
  smokeTest: "e2e/service-catalog-populated.spec.ts"
  uiComponents: ["ServiceCatalogModal", "AppointmentDrawer services tab"]
  invariants:
    - "Search requires >=2 chars to trigger backend filtering"
    - "Empty result list after non-empty seed indicates possible auth or filtering bug"

invariants:
  - "/api/admin/service-operations must return >0 active rows in non-test envs"
  - "All admin endpoints require Authorization header"
  - "Docker init warns if service_operations empty"
  - "Invoice domain tests must stay <100ms aggregate runtime"

monitoring (planned):
  counters:
    - name: service_catalog.search.requests
    - name: service_catalog.search.empty_results
    - name: appointment.create.requests
  alerts:
    - condition: "service_catalog.search.empty_results / service_catalog.search.requests > 0.5 for 10m"
      action: "Investigate seed / filtering"

commands:
  lint: "cd frontend && npm run lint"
  typecheck: "cd frontend && npm run typecheck"
  unit:
    frontend: "cd frontend && npm test"
    backend: "cd backend && pytest"
  apiSmoke: "curl http://localhost:3001/health"
  e2e: "cd frontend && npm run test:e2e"
  dbReset: "python init_db.py"
  dbSeed: "python init_db_simple.py"
  start: "./quick-start.sh"
  stop: "./stop-dev.sh"
